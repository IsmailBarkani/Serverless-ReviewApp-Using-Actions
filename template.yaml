AWSTemplateFormatVersion: 2010-09-09
Description: REST API

Parameters:
  LambdaFunctionName:
    Type: String
    Default: tradingNews-lambda

Resources:

  
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: tradingNewsLambda-package.zip 
      Runtime: python3.10
      Description: lambda function to retrieve latest trading  news
      FunctionName: !Ref LambdaFunctionName
      Handler: tradingNews-lambda.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaIAMRole.Arn
      Timeout: 60

  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*
          PolicyName: lambda
  
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: REST API gateway
      Description: RESTFULL API
      EndpointConfiguration:
        Types:
          - EDGE
      ApiKeySourceType: HEADER

  ApiGatewayResourceRandom:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:  !GetAtt ApiGateway.RootResourceId
      PathPart: random-number
      RestApiId: !Ref ApiGateway

  ApiGatewayGETMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        IntegrationResponses:
          - ResponseTemplates:
              application/json: "{\"message\": \"222\"}"
            SelectionPattern: '2\d{2}'
            StatusCode: 200
          - ResponseTemplates:
              application/json: "{\"message\": \"Internal Server Error\"}"
            SelectionPattern: '5\d{2}'
            StatusCode: 500
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: "{\"statusCode\": $input.json('$.statusCode'), \"message\": $input.json('$.message')}"
        Type: MOCK
        TimeoutInMillis: 29000
      MethodResponses:
        - ResponseModels:
            application/json: !Ref ApiGatewayModel
          StatusCode: 200
        - ResponseModels:
            application/json: !Ref ApiGatewayModel
          StatusCode: 500
      OperationName: 'mock'
      ResourceId: !Ref ApiGatewayResourceRandom
      RestApiId: !Ref ApiGateway

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGateway
      Schema: {}
  
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Mock API Stage v0
      RestApiId: !Ref ApiGateway
      StageName: 'v0'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayGETMethod
    Properties:
      Description: Mock API Deployment
      RestApiId: !Ref ApiGateway

Outputs:
  APIGWID:
    Description: API gateway Id
    Value: !Ref ApiGateway
